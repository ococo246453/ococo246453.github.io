<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>職場溝通 on Siaoyu's Blog</title><link>https://ococo246453.github.io/tags/%E8%81%B7%E5%A0%B4%E6%BA%9D%E9%80%9A/</link><description>Recent content in 職場溝通 on Siaoyu's Blog</description><generator>Hugo</generator><language>zh-tw</language><lastBuildDate>Sat, 20 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ococo246453.github.io/tags/%E8%81%B7%E5%A0%B4%E6%BA%9D%E9%80%9A/index.xml" rel="self" type="application/rss+xml"/><item><title>UI 設計師與工程師合作指南</title><link>https://ococo246453.github.io/posts/ui-%E8%A8%AD%E8%A8%88%E5%B8%AB%E8%88%87%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/</link><pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate><guid>https://ococo246453.github.io/posts/ui-%E8%A8%AD%E8%A8%88%E5%B8%AB%E8%88%87%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/</guid><description>引言 在現代軟體開發中，UI 設計師與工程師的合作至關重要。良好的溝通不僅能確保產品的美觀與功能性，還能大大提高開發效率，減少誤解和返工。
第一部分：基本工作流程 1. 設計階段 需求分析和用戶研究：深入了解目標用戶和產品需求。 概念設計和線框圖：創建初步的頁面佈局和功能結構。 視覺設計和原型製作：開發詳細的視覺設計和可交互的原型。 2. 交接階段 設計規範文檔：提供詳細的設計規範，包括顏色、字體、間距等。 資源文件準備：準備所需的圖標、圖片等素材。 交互說明和動效演示：解釋複雜的交互邏輯和動畫效果。 3. 開發階段 前端實現：將設計轉化為實際的用戶界面。 後端整合：將前端與後端服務連接。 持續溝通和調整：解決開發過程中出現的問題和疑問。 4. 反饋和迭代階段 用戶測試：收集真實用戶的使用反饋。 數據分析：分析用戶行為數據。 設計優化和功能迭代：基於反饋進行改進和更新。 第二部分：常見專業術語 1. 版本控制相關 Git：分佈式版本控制系統。 GitHub/GitLab：基於 Git 的代碼託管平台。 Commit：提交更改。 Push/Pull：推送/拉取代碼更新。 Branch：代碼分支，用於並行開發。 Merge：合併不同分支的更改。 2. 開發框架和語言 HTML/CSS/JavaScript：網頁開發的基礎語言。 React/Vue/Angular：流行的前端框架。 iOS (Swift) / Android (Kotlin/Java)：移動應用開發語言。 Flutter/React Native：跨平台移動應用開發框架。 3. 響應式設計 Breakpoint：設計佈局改變的螢幕寬度臨界點。 Media Query：根據設備特性應用不同 CSS 樣式的技術。 Flexbox：一維彈性盒子佈局。 Grid：二維網格佈局系統。 Mobile First：優先考慮移動設備的設計策略。 4. 設計系統 Component：可重用的 UI 元素。 Design Token：設計系統中的基本視覺屬性。 Style Guide：詳細的設計規範文檔。 5. 性能優化 Loading Time：頁面加載時間。 Lazy Loading：延遲加載技術。 Optimization：優化技術。 6.</description></item></channel></rss>